@using System.Net.Http.Headers

@inject IJSRuntime JS
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<base href="/" />


<button @onclick="OnDeleteButton" class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-4 rounded">
    Delete
</button>
@if (IsOpen)
{
<div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white p-4 rounded-lg shadow-lg">
        <div class="text-lg font-semibold mb-2">Delete Confirmation</div>
        <div class="text-gray-700 mb-4">Are you sure you want to delete?</div>
        <div class="flex justify-end">
            <button @onclick="OnConfirm" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 mr-2">Delete</button>
            <button @onclick="OnCancel" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">Cancel</button>
        </div>
    </div>
</div>
}


@code {
    [Parameter]
    public bool IsOpen { get; set; }
    [Parameter]
    public PostView PostView{ get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;

        // Include user authentication token in request headers
        //HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.FindFirst("access_token").Value);
    }

    private async Task OnConfirm(MouseEventArgs e)
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;

        var response = await HttpClient.DeleteAsync(NavigationManager.BaseUri + $"Posts/${PostView.Id}");


        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("console.log", "suecces");
        }
        else
        {
            await JS.InvokeVoidAsync("console.log", "NOT SCUCESFUL");
        }

        IsOpen = false;
    }

    private void OnCancel(MouseEventArgs e)
    {
        IsOpen = false;
    }

    private void OnDeleteButton()
    {
        IsOpen = true;
    }
}